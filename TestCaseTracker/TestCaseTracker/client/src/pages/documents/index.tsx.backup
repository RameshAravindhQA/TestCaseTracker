import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { MainLayout } from "@/components/layout/main-layout";
import { DocumentFolderComponent } from "@/components/documents/document-folder";
import { DocumentItem } from "@/components/documents/document-item";
import { DocumentFolderForm } from "@/components/documents/document-folder-form";
import { DocumentUploadForm } from "@/components/documents/document-upload-form";
import { DocumentViewer } from "@/components/documents/document-viewer";
import { DocumentBreadcrumb } from "@/components/documents/document-breadcrumb";
import { WindowsExplorerView } from "@/components/documents/windows-explorer-view";
import { Document, DocumentFolder, InsertDocumentFolder, InsertDocument } from "@/shared/schema";
import { DndProvider, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";

// Root-level drop zone component
interface RootDropZoneProps {
  onFolderDrop: (folderId: number) => void;
  isActive: boolean;
  children: React.ReactNode;
}

function RootDropZone({ onFolderDrop, isActive, children }: RootDropZoneProps) {
  const [{ isOver }, drop] = useDrop({
    accept: 'FOLDER',
    drop: (item: { id: number; type: string }) => {
      if (item.type === 'FOLDER') {
        onFolderDrop(item.id);
      }
      return { name: 'Root' };
    },
    collect: (monitor) => ({
      isOver: !!monitor.isOver(),
    }),
    // Only allow drops if the component is active (e.g., we're not already at root level)
    canDrop: () => isActive,
  });

  return (
    <div 
      ref={drop} 
      className={`${isActive && isOver ? 'bg-blue-50 dark:bg-blue-950 border-2 border-dashed border-blue-300' : ''}`}
      style={{ minHeight: isActive ? '100%' : 'auto' }}
    >
      {children}
    </div>
  );
}

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { 
  Folder, 
  FolderOpen, 
  File as DocumentIcon, 
  Search, 
  Download,
  Plus, 
  FileText, 
  Loader2,
  ArrowLeft,
  ArrowRight,
  ArrowUp,
  ChevronRight,
  Pencil,
  Trash2 
} from "lucide-react";

export default function DocumentsPage() {
  const { toast } = useToast();
  const [selectedProjectId, setSelectedProjectId] = useState<number | string>("");
  const [searchQuery, setSearchQuery] = useState("");
  const [viewType, setViewType] = useState<"list" | "grid" | "windows">("list");
  
  // Dialog states
  const [folderFormOpen, setFolderFormOpen] = useState(false);
  const [uploadFormOpen, setUploadFormOpen] = useState(false);
  const [viewDocumentOpen, setViewDocumentOpen] = useState(false);
  const [deleteDocumentDialog, setDeleteDocumentDialog] = useState(false);
  const [deleteFolderDialog, setDeleteFolderDialog] = useState(false);
  
  // Selected items
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [selectedFolder, setSelectedFolder] = useState<DocumentFolder | null>(null);
  const [selectedParentFolder, setSelectedParentFolder] = useState<number | null>(null);
  
  // Current path for breadcrumb navigation
  const [currentPath, setCurrentPath] = useState<number[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<number | null>(null);
  
  // Fetch projects
  const { data: projects, isLoading: isProjectsLoading } = useQuery({
    queryKey: ["/api/projects"],
  });
  
  // Fetch folders for selected project
  const { data: folders, isLoading: isFoldersLoading } = useQuery({
    queryKey: [`/api/projects/${selectedProjectId}/document-folders`],
    enabled: !!selectedProjectId,
  });
  
  // Fetch documents for selected project
  const { data: documents, isLoading: isDocumentsLoading } = useQuery({
    queryKey: [`/api/projects/${selectedProjectId}/documents`],
    enabled: !!selectedProjectId,
  });
  
  // Create folder mutation
  const createFolderMutation = useMutation({
    mutationFn: async (data: InsertDocumentFolder) => {
      const res = await apiRequest(
        "POST",
        "/api/document-folders",
        data
      );
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Folder created",
        description: "The folder has been created successfully.",
      });
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/document-folders`] 
      });
      setFolderFormOpen(false);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to create folder: ${error}`,
        variant: "destructive",
      });
    },
  });
  
  // Update folder mutation
  const updateFolderMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertDocumentFolder> }) => {
      const res = await apiRequest(
        "PUT",
        `/api/document-folders/${id}`,
        data
      );
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Folder updated",
        description: "The folder has been updated successfully.",
      });
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/document-folders`] 
      });
      setFolderFormOpen(false);
      setSelectedFolder(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to update folder: ${error}`,
        variant: "destructive",
      });
    },
  });
  
  // Delete folder mutation
  const deleteFolderMutation = useMutation({
    mutationFn: async (folderId: number) => {
      const res = await apiRequest(
        "DELETE",
        `/api/document-folders/${folderId}`,
        undefined
      );
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Folder deleted",
        description: "The folder has been deleted successfully.",
      });
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/document-folders`] 
      });
      setDeleteFolderDialog(false);
      setSelectedFolder(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to delete folder: ${error}`,
        variant: "destructive",
      });
    },
  });
  
  // Upload document mutation
  const uploadDocumentMutation = useMutation({
    mutationFn: async (data: InsertDocument & { file: File }) => {
      const formData = new FormData();
      
      // Add file
      formData.append("file", data.file);
      
      // Add other fields
      formData.append("name", data.name);
      formData.append("description", data.description || "");
      formData.append("projectId", data.projectId.toString());
      formData.append("uploadedById", data.uploadedById.toString());
      
      if (data.folderId) {
        formData.append("folderId", data.folderId.toString());
      }
      
      // Use fetch directly instead of apiRequest to avoid refresh issues
      const res = await fetch("/api/documents", {
        method: "POST",
        body: formData,
        // Don't set Content-Type header - browser will set it with boundary for FormData
        credentials: "include"
      });
      
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Document uploaded",
        description: "The document has been uploaded successfully.",
      });
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/documents`] 
      });
      setUploadFormOpen(false);
      setSelectedParentFolder(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to upload document: ${error}`,
        variant: "destructive",
      });
    },
  });
  
  // Delete document mutation
  const deleteDocumentMutation = useMutation({
    mutationFn: async (documentId: number) => {
      const res = await apiRequest(
        "DELETE",
        `/api/documents/${documentId}`,
        undefined
      );
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Document deleted",
        description: "The document has been deleted successfully.",
      });
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/documents`] 
      });
      setDeleteDocumentDialog(false);
      setSelectedDocument(null);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to delete document: ${error}`,
        variant: "destructive",
      });
    },
  });
  
  // Handle folder drop to root
  const handleFolderDropToRoot = async (folderId: number) => {
    try {
      // Call API to move the folder to root (parentFolderId = null)
      const response = await apiRequest(
        "POST",
        `/api/document-folders/${folderId}/move`,
        { targetFolderId: null }
      );
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to move folder");
      }
      
      // Invalidate queries to refresh the data
      queryClient.invalidateQueries({ 
        queryKey: [`/api/projects/${selectedProjectId}/document-folders`] 
      });
      
      toast({
        title: "Folder moved",
        description: "The folder has been moved to root successfully.",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to move folder",
        variant: "destructive",
      });
    }
  };
  
  // Handle folder operations
  const handleAddFolder = () => {
    setSelectedFolder(null);
    // If we're in a folder view, create the folder inside the current folder
    setSelectedParentFolder(currentFolderId);
    setFolderFormOpen(true);
  };
  
  const handleAddSubFolder = (parentFolderId: number) => {
    setSelectedFolder(null);
    setSelectedParentFolder(parentFolderId);
    setFolderFormOpen(true);
  };
  
  const handleEditFolder = (folder: DocumentFolder) => {
    setSelectedFolder(folder);
    setFolderFormOpen(true);
  };
  
  const handleDeleteFolder = (folderId: number) => {
    const folder = folders?.find(f => f.id === folderId);
    if (folder) {
      setSelectedFolder(folder);
      setDeleteFolderDialog(true);
    }
  };
  
  const confirmDeleteFolder = () => {
    if (selectedFolder) {
      deleteFolderMutation.mutate(selectedFolder.id);
    }
  };
  
  // Handle document operations
  const handleAddDocument = (folderId?: number) => {
    // If folderId is provided, use that; otherwise, if we're in a folder view, use currentFolderId
    setSelectedParentFolder(folderId || currentFolderId);
    setUploadFormOpen(true);
  };
  
  const handleViewDocument = (document: Document) => {
    setSelectedDocument(document);
    setViewDocumentOpen(true);
  };
  
  const handleEditDocument = (document: Document) => {
    // Document editing functionality would go here
    toast({
      title: "Edit document",
      description: "Document editing is not implemented yet.",
    });
  };
  
  const handleDeleteDocument = (documentId: number) => {
    const document = documents?.find(d => d.id === documentId);
    if (document) {
      setSelectedDocument(document);
      setDeleteDocumentDialog(true);
    }
  };
  
  const confirmDeleteDocument = () => {
    if (selectedDocument) {
      deleteDocumentMutation.mutate(selectedDocument.id);
    }
  };
  
  const handleDownloadDocument = (document: Document) => {
    try {
      // Add a timestamp to avoid cache issues
      const downloadUrl = `${document.fileUrl}?t=${Date.now()}`;
      
      // Create an invisible anchor element
      const link = document.createElement('a');
      link.href = downloadUrl;
      
      // Use the file name for the download
      link.download = document.fileName;
      
      // Append to the document, click it, and remove it
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: "Downloading document",
        description: `${document.name} is being downloaded.`,
      });
    } catch (error) {
      console.error('Error downloading document:', error);
      toast({
        title: "Download failed",
        description: "There was an error downloading the document. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Filter documents based on search query
  const filteredDocuments = documents
    ? documents.filter(
        (doc) =>
          doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          (doc.description &&
            doc.description.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    : [];
  
  // Filter folders based on search query
  const filteredFolders = folders
    ? folders.filter(
        (folder) =>
          folder.name.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : [];
  
  // Get root folders (no parent folder)
  const rootFolders = filteredFolders.filter(folder => !folder.parentFolderId);
  
  // Get root documents (no folder)
  const rootDocuments = filteredDocuments.filter(doc => !doc.folderId);
  
  // Get subfolders for a given parent folder
  const getSubFolders = (parentId: number) => {
    return filteredFolders.filter(folder => folder.parentFolderId === parentId);
  };
  
  // Handle folder navigation
  const handleNavigateToFolder = (folderId: number | null) => {
    if (folderId === null) {
      // Navigate to root
      setCurrentPath([]);
      setCurrentFolderId(null);
      return;
    }
    
    // Find the folder
    const folder = folders?.find(f => f.id === folderId);
    if (!folder) return;
    
    // Build the path to this folder
    const path: number[] = [];
    let currentFolder = folder;
    
    // Add the current folder to the path
    path.unshift(currentFolder.id);
    
    // Add all parent folders to the path
    while (currentFolder.parentFolderId) {
      const parentFolder = folders?.find(f => f.id === currentFolder.parentFolderId);
      if (!parentFolder) break;
      
      path.unshift(parentFolder.id);
      currentFolder = parentFolder;
    }
    
    setCurrentPath(path);
    setCurrentFolderId(folderId);
  };
  
  const isLoading = isProjectsLoading || 
    (!!selectedProjectId && (isFoldersLoading || isDocumentsLoading));
  
  return (
    <MainLayout>
      <DndProvider backend={HTML5Backend}>
        <div className="py-6 px-4 sm:px-6 lg:px-8">
          <div className="mb-6 flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                Document Management
              </h1>
              <p className="text-gray-500 dark:text-gray-400">
                Manage project documents and folders
              </p>
            </div>
            
            <div className="flex gap-2">
            <div className="flex items-center gap-2 mr-4">
              <Tabs value={viewType} onValueChange={(value) => setViewType(value as "list" | "grid" | "windows")}>
                <TabsList>
                  <TabsTrigger value="list">List</TabsTrigger>
                  <TabsTrigger value="grid">Grid</TabsTrigger>
                  <TabsTrigger value="windows">Windows Explorer</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
            <Button
              onClick={() => handleAddDocument()}
              variant="default"
              className="flex items-center gap-2"
              disabled={!selectedProjectId}
            >
              <FileText className="h-4 w-4" />
              Upload Document
            </Button>
            <Button
              onClick={handleAddFolder}
              variant="outline"
              className="flex items-center gap-2"
              disabled={!selectedProjectId}
            >
              <Folder className="h-4 w-4" />
              New Folder
            </Button>
            <Button
              onClick={() => window.location.reload()}
              variant="ghost"
              className="flex items-center gap-2"
            >
              <ArrowRight className="h-4 w-4" />
              Refresh
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="md:col-span-2">
            <Select
              value={selectedProjectId.toString()}
              onValueChange={(value) => {
                setSelectedProjectId(parseInt(value));
                setSearchQuery("");
                // Reset folder navigation when changing projects
                setCurrentPath([]);
                setCurrentFolderId(null);
              }}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a project" />
              </SelectTrigger>
              <SelectContent>
                {projects?.map((project) => (
                  <SelectItem key={project.id} value={project.id.toString()}>
                    {project.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div className="md:col-span-2 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-4 w-4 text-gray-400" />
            </div>
            <Input
              type="search"
              placeholder="Search documents and folders..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              disabled={!selectedProjectId}
            />
          </div>
        </div>
        
        {!selectedProjectId ? (
          <Card>
            <CardContent className="pt-6 text-center py-10">
              <Folder className="h-16 w-16 mx-auto text-gray-400 mb-4" />
              <p className="text-gray-500">
                Please select a project to view its documents
              </p>
            </CardContent>
          </Card>
        ) : isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : rootFolders.length === 0 && rootDocuments.length === 0 ? (
          <Card>
            <CardContent className="pt-6 text-center py-10">
              <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
              <p className="text-gray-500">
                {searchQuery
                  ? "No documents or folders match your search"
                  : "No documents or folders found. Upload a document or create a folder to get started."}
              </p>
              <div className="flex justify-center gap-2 mt-4">
                <Button
                  onClick={() => handleAddDocument()}
                  variant="default"
                  className="flex items-center gap-2"
                >
                  <FileText className="h-4 w-4" />
                  Upload Document
                </Button>
                <Button
                  onClick={handleAddFolder}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Folder className="h-4 w-4" />
                  New Folder
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <RootDropZone
            onFolderDrop={handleFolderDropToRoot}
            isActive={!!currentFolderId} // Only enable root drop zone when inside a folder
          >
            {viewType === "windows" ? (
              <WindowsExplorerView
                folders={filteredFolders}
                documents={filteredDocuments}
                currentFolderId={currentFolderId}
                onNavigateToFolder={handleNavigateToFolder}
                onViewDocument={handleViewDocument}
                onEditDocument={handleEditDocument}
                onDeleteDocument={handleDeleteDocument}
                onDownloadDocument={handleDownloadDocument}
                onAddDocument={handleAddDocument}
                onAddFolder={handleAddSubFolder}
                onEditFolder={handleEditFolder}
                onDeleteFolder={handleDeleteFolder}
              />
            ) : (
              <div className="border rounded-md overflow-hidden bg-white dark:bg-gray-950 shadow">
                {/* Windows-style Explorer Header and Address Bar */}
                <div className="p-3 border-b flex items-center justify-between bg-gray-50 dark:bg-gray-900">
                  <div className="flex items-center space-x-2">
                    <Button 
                      variant="ghost"
                      size="icon"
                      onClick={() => {
                        // Navigate to parent folder or back to root
                        if (currentPath.length <= 1) {
                          handleNavigateToFolder(null); // Go to root
                        } else {
                          // Go to parent folder
                          const parentFolderId = currentPath[currentPath.length - 2];
                          handleNavigateToFolder(parentFolderId);
                        }
                      }}
                      disabled={currentPath.length === 0}
                    >
                      <ArrowLeft className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="ghost"
                      size="icon"
                      disabled
                    >
                      <ArrowRight className="h-4 w-4" />
                    </Button>
                  </div>

                  {/* Address/Path bar similar to Windows Explorer */}
                  <div className="flex-1 mx-4">
                    <div className="flex items-center bg-white dark:bg-gray-800 border rounded-md px-2 py-1">
                      <span className="text-gray-500 mr-2">
                        <Folder className="h-4 w-4" />
                      </span>
                      <div className="flex items-center text-sm text-gray-600 dark:text-gray-300 overflow-x-auto">
                        <span 
                          className="cursor-pointer hover:underline hover:text-blue-500 flex items-center"
                          onClick={() => handleNavigateToFolder(null)}
                        >
                          Root
                        </span>
                        {currentPath.map((folderId, index) => {
                          const folder = folders?.find(f => f.id === folderId);
                          if (!folder) return null;
                          return (
                            <div key={folderId} className="flex items-center">
                              <ChevronRight className="h-4 w-4 mx-1 text-gray-400" />
                              <span 
                                className="cursor-pointer hover:underline hover:text-blue-500"
                                onClick={() => handleNavigateToFolder(folderId)}
                              >
                                {folder.name}
                              </span>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>

                  <div className="relative rounded-md shadow-sm">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Search className="h-4 w-4 text-gray-400" />
                    </div>
                    <Input
                      type="search"
                      placeholder="Search..."
                      className="pl-10 w-48"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      disabled={!selectedProjectId}
                    />
                  </div>
                </div>

                {/* Main Explorer Content - Windows-style Grid View */}
                <div className="p-4 h-[500px] overflow-auto">
                  {/* File and Folder Grid - Windows Explorer style */}
                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    {/* Root Folder navigation icon */}
                    {currentPath.length > 0 && (
                      <div 
                        className="flex flex-col items-center justify-center p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors"
                        onClick={() => {
                          // Navigate to parent folder or back to root
                          if (currentPath.length <= 1) {
                            handleNavigateToFolder(null); // Go to root
                          } else {
                            // Go to parent folder
                            const parentFolderId = currentPath[currentPath.length - 2];
                            handleNavigateToFolder(parentFolderId);
                          }
                        }}
                      >
                        <div className="relative mb-2">
                          <FolderOpen className="h-16 w-16 text-yellow-400" />
                          <ArrowUp className="h-4 w-4 absolute bottom-1 right-1 text-black dark:text-white bg-yellow-300 rounded-full p-0.5" />
                        </div>
                        <span className="text-sm text-center truncate">Parent Folder</span>
                      </div>
                    )}
                    
                    {/* Display folders first - Windows Explorer style */}
                    {!currentFolderId ? 
                      rootFolders.map((folder) => (
                        <div 
                          key={folder.id}
                          className="flex flex-col items-center justify-center p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors relative group"
                          onClick={() => handleNavigateToFolder(folder.id)}
                          onDoubleClick={() => handleNavigateToFolder(folder.id)}
                        >
                          <Folder className="h-16 w-16 text-yellow-400 mb-2" />
                          <span className="text-sm text-center truncate max-w-full">{folder.name}</span>
                          
                          {/* Context menu actions shown on hover */}
                          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 flex space-x-0.5">
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleEditFolder(folder); }}>
                              <Pencil className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDeleteFolder(folder.id); }}>
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      )) :
                      getSubFolders(currentFolderId).map((folder) => (
                        <div 
                          key={folder.id}
                          className="flex flex-col items-center justify-center p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors relative group"
                          onClick={() => handleNavigateToFolder(folder.id)}
                          onDoubleClick={() => handleNavigateToFolder(folder.id)}
                        >
                          <Folder className="h-16 w-16 text-yellow-400 mb-2" />
                          <span className="text-sm text-center truncate max-w-full">{folder.name}</span>
                          
                          {/* Context menu actions shown on hover */}
                          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 flex space-x-0.5">
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleEditFolder(folder); }}>
                              <Pencil className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDeleteFolder(folder.id); }}>
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      ))
                }
                
                    {/* Display documents - Windows Explorer style */}
                    {!currentFolderId ? 
                      rootDocuments.map((document) => (
                        <div 
                          key={document.id}
                          className="flex flex-col items-center justify-center p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors relative group"
                          onClick={() => handleViewDocument(document)}
                          onDoubleClick={() => handleViewDocument(document)}
                        >
                          <FileText className="h-16 w-16 text-blue-400 mb-2" />
                          <span className="text-sm text-center truncate max-w-full">{document.name}</span>
                          
                          {/* Context menu actions shown on hover */}
                          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 flex space-x-0.5">
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleEditDocument(document); }}>
                              <Pencil className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDeleteDocument(document.id); }}>
                              <Trash2 className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDownloadDocument(document); }}>
                              <Download className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      )) :
                      filteredDocuments
                        .filter(doc => doc.folderId === currentFolderId)
                        .map((document) => (
                          <div 
                            key={document.id}
                            className="flex flex-col items-center justify-center p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors relative group"
                            onClick={() => handleViewDocument(document)}
                            onDoubleClick={() => handleViewDocument(document)}
                          >
                            <FileText className="h-16 w-16 text-blue-400 mb-2" />
                            <span className="text-sm text-center truncate max-w-full">{document.name}</span>
                            
                            {/* Context menu actions shown on hover */}
                            <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 flex space-x-0.5">
                              <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleEditDocument(document); }}>
                                <Pencil className="h-3 w-3" />
                              </Button>
                              <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDeleteDocument(document.id); }}>
                                <Trash2 className="h-3 w-3" />
                              </Button>
                              <Button variant="ghost" size="icon" className="h-6 w-6" onClick={(e) => { e.stopPropagation(); handleDownloadDocument(document); }}>
                                <Download className="h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                        ))
                }
                
                    {/* Show empty state message if no content */}
                    {((currentFolderId && 
                      getSubFolders(currentFolderId).length === 0 && 
                      filteredDocuments.filter(doc => doc.folderId === currentFolderId).length === 0) ||
                      (!currentFolderId && rootFolders.length === 0 && rootDocuments.length === 0)) && (
                      <div className="col-span-full flex flex-col items-center justify-center py-12 text-center">
                        <FolderOpen className="h-16 w-16 text-gray-300 mb-4" />
                        <p className="text-gray-500">
                          {searchQuery ? "No items match your search" : "This folder is empty"}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Explorer Status Bar */}
                <div className="p-2 border-t bg-gray-50 dark:bg-gray-900 text-xs text-gray-500 dark:text-gray-400 flex justify-between items-center">
                  <div>
                    {!currentFolderId
                      ? `${rootFolders.length} folders, ${rootDocuments.length} documents`
                      : `${getSubFolders(currentFolderId).length} folders, ${filteredDocuments.filter(doc => doc.folderId === currentFolderId).length} documents`
                    }
                  </div>
                  <div>
                    {searchQuery && `Showing results for "${searchQuery}"`}
                  </div>
                </div>
              </div>
            </RootDropZone>
          )}
        </div>
      
      {/* Folder Form Dialog */}
      <Dialog open={folderFormOpen} onOpenChange={setFolderFormOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedFolder ? "Edit Folder" : "Create New Folder"}
            </DialogTitle>
            <DialogDescription>
              {selectedFolder
                ? "Update the folder details below."
                : "Enter the details for the new folder."}
            </DialogDescription>
          </DialogHeader>
          
          <DocumentFolderForm
            projectId={Number(selectedProjectId)}
            parentFolderId={selectedParentFolder}
            existingFolder={selectedFolder}
            folders={folders || []}
            onSubmit={(data) => {
              if (selectedFolder) {
                updateFolderMutation.mutate({
                  id: selectedFolder.id,
                  data,
                });
              } else {
                createFolderMutation.mutate(data);
              }
            }}
            isSubmitting={
              createFolderMutation.isPending || updateFolderMutation.isPending
            }
          />
        </DialogContent>
      </Dialog>
      
      {/* Document Upload Dialog */}
      <Dialog open={uploadFormOpen} onOpenChange={setUploadFormOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Upload Document</DialogTitle>
            <DialogDescription>
              Upload a document to the selected project.
            </DialogDescription>
          </DialogHeader>
          
          <DocumentUploadForm
            projectId={Number(selectedProjectId)}
            folders={folders || []}
            selectedFolderId={selectedParentFolder}
            onSubmit={(data) => {
              uploadDocumentMutation.mutate(data as InsertDocument & { file: File });
            }}
            isSubmitting={uploadDocumentMutation.isPending}
          />
        </DialogContent>
      </Dialog>
      
      {/* Document Viewer Dialog */}
      <Dialog open={viewDocumentOpen} onOpenChange={setViewDocumentOpen}>
        <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-auto">
          {selectedDocument && (
            <DocumentViewer
              document={selectedDocument}
              onClose={() => setViewDocumentOpen(false)}
              onDownload={() => handleDownloadDocument(selectedDocument)}
            />
          )}
        </DialogContent>
      </Dialog>
      
      {/* Delete Document Confirmation */}
      <AlertDialog open={deleteDocumentDialog} onOpenChange={setDeleteDocumentDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete the document "{selectedDocument?.name}".
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDeleteDocument}
              className="bg-red-600 hover:bg-red-700"
              disabled={deleteDocumentMutation.isPending}
            >
              {deleteDocumentMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete Document"
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      
      {/* Delete Folder Confirmation */}
      <AlertDialog open={deleteFolderDialog} onOpenChange={setDeleteFolderDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete the folder "{selectedFolder?.name}" and all its contents.
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDeleteFolder}
              className="bg-red-600 hover:bg-red-700"
              disabled={deleteFolderMutation.isPending}
            >
              {deleteFolderMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete Folder"
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </DndProvider>
    </MainLayout>
  );
}