
Run `npm audit` for details.
ðŸš€ Starting TestCaseTracker Application...
ðŸ“‚ Working directory: /home/runner/workspace/TestCaseTracker

node:internal/modules/run_main:128
    triggerUncaughtException(
    ^
Error [TransformError]: Transform failed with 1 error:
/home/runner/workspace/TestCaseTracker/server/storage.ts:801:34: ERROR: Expected ">" but found "`text\nCustomer[]> { return Array.from(this.customers.values());\n  }\n\n  async getCustomerById(id: number): Promise<Customer | null> {\n    return this.customers.get(id) || null;\n  }\n\n  async updateCustomer(id: number, data: Partial<Customer>): Promise<Customer | null> {\n    const customer = this.customers.get(id);\n    if (!customer) return null;\n\n    const updatedCustomer = { ...customer, ...data, updatedAt: new Date() };\n    this.customers.set(id, updatedCustomer);\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id: number): Promise<boolean> {\n    return this.customers.delete(id);\n  }\n\n  // Tag operations\n  async createTag(data: Omit<Tag, 'id'>): Promise<Tag> {\n    const id = this.nextId++;\n\n    const tag: Tag = {\n      ...data,\n      id\n    };\n\n    this.tags.set(id, tag);\n    return tag;\n  }\n\n  async getTags(): Promise<Tag[]> {\n    return Array.from(this.tags.values());\n  }\n\n  async getTagById(id: number): Promise<Tag | null> {\n    return this.tags.get(id) || null;\n  }\n\n  async updateTag(id: number, data: Partial<Tag>): Promise<Tag | null> {\n    const tag = this.tags.get(id);\n    if (!tag) return null;\n\n    const updatedTag = { ...tag, ...data };\n    this.tags.set(id, updatedTag);\n    return updatedTag;\n  }\n\n  async deleteTag(id: number): Promise<boolean> {\n    return this.tags.delete(id);\n  }\n\n  // Kanban operations\n  async createKanbanColumn(data: Omit<KanbanColumn, 'id'>): Promise<KanbanColumn> {\n    const id = this.nextId++;\n\n    const column: KanbanColumn = {\n      ...data,\n      id\n    };\n\n    this.kanbanColumns.set(id, column);\n    return column;\n  }\n\n  async getKanbanColumns(projectId: number): Promise<KanbanColumn[]> {\n    return Array.from(this.kanbanColumns.values())\n      .filter(col => col.projectId === projectId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  async updateKanbanColumn(id: number, data: Partial<KanbanColumn>): Promise<KanbanColumn | null> {\n    const column = this.kanbanColumns.get(id);\n    if (!column) return null;\n\n    const updatedColumn = { ...column, ...data };\n    this.kanbanColumns.set(id, updatedColumn);\n    return updatedColumn;\n  }\n\n  async deleteKanbanColumn(id: number): Promise<boolean> {\n    // Also delete all cards in this column\n    const cardsInColumn = Array.from(this.kanbanCards.values()).filter(card => card.columnId === id);\n    cardsInColumn.forEach(card => this.kanbanCards.delete(card.id));\n\n    return this.kanbanColumns.delete(id);\n  }\n\n  async createKanbanCard(data: Omit<KanbanCard, 'id'>): Promise<KanbanCard> {\n    const id = this.nextId++;\n\n    const card: KanbanCard = {\n      ...data,\n      id\n    };\n\n    this.kanbanCards.set(id, card);\n    return card;\n  }\n\n  async getKanbanCards(columnId: number): Promise<KanbanCard[]> {\n    return Array.from(this.kanbanCards.values())\n      .filter(card => card.columnId === columnId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  async updateKanbanCard(id: number, cardData: any): Promise<any> {\n    const card = this.kanbanCards.get(id);\n    if (!card) return null;\n\n    const updatedCard = { ...card, ...cardData };\n    this.kanbanCards.set(id, updatedCard);\n    return updatedCard;\n  }\n\n  async deleteKanbanCard(id: number): Promise<boolean> {\n    // Also delete all cards in this column\n    const cardsInColumn = Array.from(this.kanbanCards.values()).filter(card => card.columnId === id);\n    cardsInColumn.forEach(card => this.kanbanCards.delete(card.id));\n\n    return this.kanbanCards.delete(id);\n  }\n\n  // Custom marker operations\n  async createCustomMarker(data: Omit<CustomMarker, 'id'>): Promise<CustomMarker> {\n    const id = this.nextId++;\n\n    const marker: CustomMarker = {\n      ...data,\n      id\n    };\n\n    this.customMarkers.set(id, marker);\n    return marker;\n  }\n\n  async getCustomMarkers(): Promise<CustomMarker[]> {\n    return Array.from(this.customMarkers.values());\n  }\n\n  async updateCustomMarker(id: number, data: Partial<CustomMarker>): Promise<CustomMarker | null> {\n    const marker = this.customMarkers.get(id);\n    if (!marker) return null;\n\n    const updatedMarker = { ...marker, ...data };\n    this.customMarkers.set(id, updatedMarker);\n    return updatedMarker;\n  }\n\n  async deleteCustomMarker(id: number): Promise<boolean> {\n    return this.customMarkers.delete(id);\n  }\n\n  // Matrix operations\n  async createMatrixCell(data: Omit<MatrixCell, 'id'>): Promise<MatrixCell> {\n    const id = this.nextId++;\n\n    const cell: MatrixCell = {\n      ...data,\n      id\n    };\n\n    this.matrixCells.set(id, cell);\n    return cell;\n  }\n\n  async getMatrixCells(): Promise<MatrixCell[]> {\n    return Array.from(this.matrixCells.values());\n  }\n\n  async updateMatrixCell(id: number, data: Partial<MatrixCell>): Promise<MatrixCell | null> {\n    const cell = this.matrixCells.get(id);\n    if (!cell) return null;\n\n    const updatedCell = { ...cell, ...data };\n    this.matrixCells.set(id, updatedCell);\n    return updatedCell;\n  }\n\n  async deleteMatrixCell(id: number): Promise<boolean> {\n    return this.matrixCells.delete(id);\n  }\n\n  // Project member operations\n  async addProjectMember(data: Omit<any, 'id'>): Promise<any> {\n    const id = this.nextId++;\n\n    const member: any = {\n      ...data,\n      id\n    };\n\n    this.projectMembers.set(id, member);\n    return member;\n  }\n\n  async getProjectMembers(projectId: number): Promise<any[]> {\n    return Array.from(this.projectMembers.values()).filter(member => member.projectId === projectId);\n  }\n\n  // Get project memberships for a specific user\n  async getUserProjectMemberships(userId: number): Promise<any[]> {\n    return Array.from(this.projectMembers.values()).filter(member => member.userId === userId);\n  }\n\n  async removeProjectMember(projectId: number, userId: number): Promise<boolean> {\n    const member = Array.from(this.projectMembers.values())\n      .find(m => m.projectId === projectId && m.userId === userId);\n\n    if (member) {\n      return this.projectMembers.delete(member.id);\n    }\n    return false;\n  }\n\n  // Activity operations\n  async getActivities(limit = 10): Promise<any[]> {\n    return Array.from(this.activities.values())\n      .sort((a, b) => (b.timestamp || b.createdAt).getTime() - (a.timestamp || a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  async getProjectActivities(projectId: number, limit: number = 10): Promise<any[]> {\n    return Array.from(this.activities.values())\n      .filter(activity => activity.details?.projectId === projectId)\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n  }\n\n  async createActivity(activity: any): Promise<any> {\n    const newActivity = {\n      id: this.getNextId(),\n      ...activity,\n      timestamp: new Date(),\n    };\n    this.activities.set(newActivity.id, newActivity);\n    return newActivity;\n  }\n\n  // CSV Export for Projects\n  async exportProjectsCSV(): Promise<any[]> {\n    const projects = await this.getProjects();\n    const exportData = [];\n\n    for (const project of projects) {\n      const modules = await this.getModulesByProject(project.id);\n      const testCases = await this.getTestCasesByProject(project.id);\n      const bugs = await this.getBugsByProject(project.id);\n\n      exportData.push({\n        projectId: project.id,\n        projectName: project.name,\n        description: project.description,\n        status: project.status,\n        createdAt: project.createdAt,\n        totalModules: modules.length,\n        totalTestCases: testCases.length,\n        totalBugs: bugs.length,\n        modules: modules.map(m => m.name).join(';'),\n        testCases: testCases.map(tc => `"
    at failureErrorWithLog (/home/runner/workspace/TestCaseTracker/node_modules/esbuild/lib/main.js:1465:15)
    at /home/runner/workspace/TestCaseTracker/node_modules/esbuild/lib/main.js:734:50
    at responseCallbacks.<computed> (/home/runner/workspace/TestCaseTracker/node_modules/esbuild/lib/main.js:601:9)
    at handleIncomingPacket (/home/runner/workspace/TestCaseTracker/node_modules/esbuild/lib/main.js:656:12)
    at Socket.readFromStdout (/home/runner/workspace/TestCaseTracker/node_modules/esbuild/lib/main.js:579:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:561:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
    at Readable.push (node:internal/streams/readable:392:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:191:23)

Node.js v20.18.1
Server exited with code 1
