Log all fetch or axios calls on the front end that expect application/json. For each response, check if the content-type is not JSON and log a warning with the URL and the content-type.”

🛠️ 2. Prompt to Fix Backend API to Always Return JSON
“Ensure all Node.js (Express) API routes return res.json({...}) and not res.sendFile() or res.render() unless explicitly intended. Handle 404 and unknown routes with a fallback JSON like:

js
Copy
Edit
app.use((req, res) => {
  res.status(404).json({ error: 'Not found' });
});
```”

---

## 🧪 3. **Prompt to Check Content-Type Before Parsing JSON**
> “Before using `res.json()` in the frontend, validate the response content-type:
```js
const response = await fetch(url);
if (response.headers.get("content-type")?.includes("application/json")) {
  const data = await response.json();
} else {
  throw new Error("Expected JSON but received non-JSON");
}
```”

---

## 🔄 4. **Prompt to Add Global Error Handling for Unexpected HTML**
> “Globally catch and log fetch errors where response includes `<!DOCTYPE html>` instead of JSON. Show user-friendly error UI if such a case is detected.”

---

## 🛑 5. **Prompt to Block HTML Response from Being Parsed as JSON**
> “Before parsing with `res.json()`, read the first few characters of the response body. If it starts with `<` or `<!DOCTYPE`, abort the JSON parsing and show an error:
```js
const text = await response.text();
if (text.trim().startsWith("<")) {
  throw new Error("HTML response received instead of JSON");
}
const data = JSON.parse(text);
```”

---

## 🌐 6. **Prompt to Test Lottie JSON Loading Correctly**
> “Verify the Lottie file URL (e.g., `/public/lottie/businessman-rocket.json`) is accessible via direct browser visit. If not, check server static config or path resolution in Replit.”

---

## 🚫 7. **Prompt to Fix Static File Paths**
> “If your React/Node app serves static files (like `.json` in `public/lottie/`), ensure Express uses:
```js
app.use('/lottie', express.static(path.join(__dirname, 'client/public/lottie')));